
#!/usr/bin/env bash
# bin/release <build-dir> <

# fail fast
set -eo pipefail

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

if [[ ! "${STACK}" == "heroku-22" ]]; then
  error "'heroku-buildpack-vm-s3 is only available for stack 'heroku-22'. Found app stack: '${STACK}'."
  exit 1
fi

# s3fs installation

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_SOURCELIST_DIR="$CACHE_DIR/apt/sources"
APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"
APT_FORCE_YES="--allow-downgrades --allow-remove-essential --allow-change-held-packages"

if [ -f $APT_CACHE_DIR/archives/s3fs.deb ]; then
  topic "Reusing cached packages"
else
  topic "No cached packages detected"
  rm -rf $APT_CACHE_DIR
  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"
  mkdir -p "$APT_SOURCELIST_DIR"
  cat "/etc/apt/sources.list" > "$APT_SOURCES"
fi

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$APT_SOURCES -o dir::etc::sourceparts=/dev/null"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

topic "Fetching .debs for s3fs"
apt-get $APT_OPTIONS -y $APT_FORCE_YES -d install --reinstall s3fs | indent

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

# Victoria Metrics installation

# Read VM_VERSION from app config var (if provided) or use default
if [ -f "$ENV_DIR/VM_VERSION" ]; then
  VM_VERSION=$(cat $ENV_DIR/VM_VERSION)
else
  VM_VERSION="1.92.1"
fi

# Store which VM_VERSION we are using in the cache to bust the cache if it changes
if [ -f $CACHE_DIR/.victoria-metrics/VM_VERSION ]; then
  CACHED_VM_VERSION=$(cat "$CACHE_DIR/.victoria-metrics/VM_VERSION")
else
  CACHED_VM_VERSION=$VM_VERSION
fi

# Ensure we store the VM_VERSION in the cache for next time.
mkdir -p "$CACHE_DIR/.victoria-metrics"
echo "$VM_VERSION" > "$CACHE_DIR/.victoria-metrics/VM_VERSION"

VM_CACHE_DIR="$CACHE_DIR/victoria-metrics/cache"
VM_BINARY_DIR="$BUILD_DIR/.victoria-metrics/bin"
VM_STORAGE_DATA_PATH="$BUILD_DIR/.victoria-metrics/storage"

if [ -f $VM_CACHE_DIR/victoria-metrics-prod ] && [[ $CACHED_VM_VERSION == $VM_VERSION ]] ; then
  topic "Reusing cached Victoria Metrics binary"
else
  topic "No cached Victoria Metrics binary detected"
  rm -rf $VM_CACHE_DIR
  mkdir -p "$VM_CACHE_DIR"
fi

if [[ ! -f $VM_CACHE_DIR/victoria-metrics-prod ]]; then
  topic "Fetching Victoria Metrics (Linux AMD64) v$VM_VERSION..."
  wget --quiet -O victoria-metrics.tar.gz https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v$VM_VERSION/victoria-metrics-linux-amd64-v$VM_VERSION.tar.gz
  tar -xzf victoria-metrics.tar.gz
  mv victoria-metrics-prod $VM_CACHE_DIR
  rm -f victoria-metrics.tar.gz || true
fi

topic "Installing Victoria Metrics"
cp $VM_CACHE_DIR/victoria-metrics-prod $VM_BINARY_DIR
chmod a+x $VM_BINARY_DIR/victoria-metrics-prod
mkdir -p $VM_STORAGE_DATA_PATH

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_vm_s3.sh
export PATH="\$HOME/.apt/usr/bin:\$HOME/.victoria-metrics/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$VM_BINARY_DIR:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"


#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"

# mkdir -p $BUILD_DIR/.profile.d

# if [[ ! -f ${BUILD_DIR}/.profile.d/accurate-scaler.sh ]]; then
#   arrow "Installing startup script ..."
#   cat > ${BUILD_DIR}/.profile.d/accurate-scaler.sh <<-SH
# function proctype() {
#   for monitored_proctype in \$monitored_proctypes; do
#     if [[ \$DYNO =~ ^\$monitored_proctype.* ]]; then
#       echo \$monitored_proctype
#     fi
#   done
# }

# export PATH=\$PATH:\$HOME/bin

# # Check if buildpack was correctly installed or exit with failure
# if [[ ! -x \$HOME/bin/otelcol-contrib ]]; then
#   echo "OpenTelemetry Collector Contrib not found. Buildpack failed to install correctly."
#   exit 1
# fi

# monitored_proctypes=\${ACCURATE_SCALER_MONITORED_PROCTYPES:-web worker}
# dyno_proctype=\$(proctype)

# # Check if dyno is running a monitored process type or notify and exit without failing
# if [[ \$dyno_proctype == "" ]]; then
#   echo "AccurateScaler: Dyno '\$DYNO' is not running a monitored process type, PushProx Client won't be started."
# else
#   echo "AccurateScaler: Detected monitored '\$dyno_proctype' process type running in dyno."

#   # Check if add-on is (correctly) installed or notify and exit without failing
#   if [[ \$ACCURATE_SCALER_PROM_WRITER_URL == "" || \$ACCURATE_SCALER_APP_ID == "" ]]; then
#     echo "AccurateScaler: Add-on config vars missing! OpenTelemetry Collector Contrib won't be started."
#   else
#     echo "AccurateScaler: Starting OpenTelemetry Collector Contrib ..."
#     otelcol-contrib --config=file:\$HOME/accurate-scaler/otelcol-contrib/config.yaml &
#   fi
# fi
# SH
# fi

# mkdir -p $BUILD_DIR/accurate-scaler/otelcol-contrib/prom_rw

# if [[ ! -f $BUILD_DIR/accurate-scaler/otelcol-contrib/config.yaml ]]; then
#   arrow "Creating AccurateScaler OpenTelemetry Collector Contrib configuration file ..."
#   cat > $BUILD_DIR/accurate-scaler/otelcol-contrib/config.yaml <<-YAML
# receivers:
#   prometheus:
#     config:
#       scrape_configs:
#         - job_name: "prometheus_exporter_gem"
#           scrape_interval: 1s
#           static_configs:
#             - targets: ["localhost:9394"]
# processors:
#   batch:
#     timeout: 5s
# exporters:
#   prometheusremotewrite:
#     endpoint: "\$ACCURATE_SCALER_PROM_WRITER_URL"
#     tls:
#       insecure: true
#     external_labels:
#       accurate_scaler_app_id: "\$ACCURATE_SCALER_APP_ID"
#       dyno: "\${DYNO}"
#     resource_to_telemetry_conversion:
#       enabled: true
# service:
#   pipelines:
#     metrics:
#       receivers: [prometheus]
#       processors: [batch]
#       exporters: [prometheusremotewrite]
# YAML
# fi
