
#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Fail fast.
set -eo pipefail

# Debug.
# set -x

# Parse and derive params.
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

if [[ ! "${STACK}" == "heroku-22" ]]; then
  error "'heroku-buildpack-vm-s3 is only available for stack 'heroku-22'. Found app stack: '${STACK}'."
  exit 1
fi

# s3fs installation

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_SOURCELIST_DIR="$CACHE_DIR/apt/sources"
APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"
APT_FORCE_YES="--allow-downgrades --allow-remove-essential --allow-change-held-packages"

if [ -f $APT_CACHE_DIR/archives/s3fs.deb ]; then
  topic "Reusing cached packages"
else
  topic "No cached packages detected"
  rm -rf $APT_CACHE_DIR
  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"
  mkdir -p "$APT_SOURCELIST_DIR"
  cat "/etc/apt/sources.list" > "$APT_SOURCES"
fi

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$APT_SOURCES -o dir::etc::sourceparts=/dev/null"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

topic "Fetching .debs for s3fs"
apt-get $APT_OPTIONS -y $APT_FORCE_YES -d install --reinstall s3fs | indent

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

# Victoria Metrics installation

# Read buildpack config from app config vars (if provided) or use defaults
VM_VERSION=$(cat $ENV_DIR/VM_VERSION 2>/dev/null || echo "1.92.1")
VM_RETENTION_PERIOD=$(cat $ENV_DIR/VM_RETENTION_PERIOD 2>/dev/null || echo "1")

# Store which VM_VERSION we are using in the cache to bust the cache if it changes
if [ -f $CACHE_DIR/.victoria-metrics/VM_VERSION ]; then
  CACHED_VM_VERSION=$(cat "$CACHE_DIR/.victoria-metrics/VM_VERSION")
else
  CACHED_VM_VERSION=$VM_VERSION
fi

# Ensure we store the VM_VERSION in the cache for next time.
mkdir -p "$CACHE_DIR/.victoria-metrics"
echo "$VM_VERSION" > "$CACHE_DIR/.victoria-metrics/VM_VERSION"

VM_CACHE_DIR="$CACHE_DIR/victoria-metrics/cache"
VM_BIN_DIR="$BUILD_DIR/.victoria-metrics/bin"
VM_STORAGE_DATA_PATH="$BUILD_DIR/.victoria-metrics/storage"

if [ -f $VM_CACHE_DIR/victoria-metrics-prod ] && [[ $CACHED_VM_VERSION == $VM_VERSION ]] ; then
  topic "Reusing cached Victoria Metrics binary"
else
  topic "No cached Victoria Metrics binary detected or VM_VERSION changed"
  rm -rf $VM_CACHE_DIR
  mkdir -p "$VM_CACHE_DIR"
fi

if [[ ! -f $VM_CACHE_DIR/victoria-metrics-prod ]]; then
  topic "Fetching Victoria Metrics (Linux AMD64) v$VM_VERSION..."
  wget --quiet -O victoria-metrics.tar.gz https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v$VM_VERSION/victoria-metrics-linux-amd64-v$VM_VERSION.tar.gz
  tar -xzf victoria-metrics.tar.gz
  mv victoria-metrics-prod $VM_CACHE_DIR
  rm -f victoria-metrics.tar.gz || true
fi

topic "Installing Victoria Metrics"
mkdir -p $VM_BIN_DIR
mkdir -p $VM_STORAGE_DATA_PATH
cp $VM_CACHE_DIR/victoria-metrics-prod $VM_BIN_DIR
chmod a+x $VM_BIN_DIR/victoria-metrics-prod

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000-vm-s3.sh
export PATH="\$HOME/.apt/usr/bin:\$HOME/.victoria-metrics/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
export VM_VERSION=\${VM_VERSION:-$VM_VERSION}
export VM_RETENTION_PERIOD=\${VM_RETENTION_PERIOD:-$VM_RETENTION_PERIOD}
export VM_STORAGE_DATA_PATH=\$HOME/.victoria_metrics/storage}

# Mount bucket on VM_STORAGE_DATA_PATH
echo "\$BUCKETEER_AWS_ACCESS_KEY_ID:\$BUCKETEER_AWS_SECRET_ACCESS_KEY" > "\$HOME/.passwd-s3fs"
chmod 600 "\$HOME/.passwd-s3fs"
s3fs \$BUCKETEER_BUCKET_NAME "\$HOME/.victoria-metrics/storage" -o passwd_file="\$HOME/.passwd-s3fs" -o use_cache=/tmp
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$VM_BIN_DIR:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
export VM_VERSION=$VM_VERSION
export VM_RETENTION_PERIOD=$VM_RETENTION_PERIOD
export VM_STORAGE_DATA_PATH=$VM_STORAGE_DATA_PATH

# Give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|VM_VERSION|VM_RETENTION_PERIOD|VM_STORAGE_DATA_PATH)='  > "$LP_DIR/export"
